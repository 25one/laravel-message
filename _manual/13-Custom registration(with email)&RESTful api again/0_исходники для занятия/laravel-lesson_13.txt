----13-Custom registration(with email)&RESTful api again

---1.НОВОЕ ПОЛЕ active ДЛЯ ТАБЛИЦЫ users 

database\migrations\2014_10_12_000000_create_users_table.php

            $table->integer('active')->default(0); //!!!->default(0) 

+ DatabaseSeeder.php

'active' => 1,

remove all tables + php artisan migrate --seed

...+ see new api_token for admin (alex) + change in mobi-message Api.php + send few new messages


---2.ИЗМЕНИТЬ АЛГОРИТМ РЕГИСТРАЦИИ 

Controllers\Auth\RegisterControler.php

protected $redirectTo = '/letter';


routes\web.php

Auth::routes();
Route::name('letter')->get('/letter', 'Front\MessageController@letter'); //!!!


Controllers\Front\MessageControler.php

    /**
     * Show message of sending letter to email for finish registration.
     *
     * @return void
     */
    public function letter()
    {
        return view('auth.letter');
    }


views\auth\letter.blade.php (from login(or registr).blade.php)

@extends('front.layout')

@section('main')
<div class="container">
    <div class="row justify-content-center">
        <div class="col-md-8">
            <div class="card">
                <div class="card-header">{{ __('Finish Registration') }}</div>

                <div class="card-body">
                   <h3>Chech your email and go to link...</h3> 
                </div>
            </div>
        </div>
    </div>
</div>
@endsection

...НО ПОКА login ПРОИСХОДИТ "АВТОМАТОМ"... - УДАЛИМ ЭТОГО ПОЛЬЗОВАТЕЛЯ В users

...НУЖНО ПЕРЕОПРЕДЕЛИТЬ МЕТОД РЕГИСТРАЦИИ - ТАК, ЧТОБЫ РЕГИСТРИРОВАЛСЯ (В users), НО НЕ ЛОГИНИЛСЯ, А ПЕРЕХОДИЛ НА /letter

Controllers\Auth\RegisterControler.php ИСПОЛЬЗУЕТ use Illuminate\Foundation\Auth\RegistersUsers; - !!!trait (vendor\laravel\framework\src\Illuminate\Foundation\Auth\RegistersUsers.php) - ВОЗМОЖНО ПЕРЕОПРЕДЕЛИТЬ МЕТОД

Controllers\Auth\RegisterControler.php

...
use Illuminate\Http\Request;
use Illuminate\Auth\Events\Registered;

    /**
     * Handle a registration request for the application.
     *
     * @param  \Illuminate\Http\Request  $request
     * @return \Illuminate\Http\Response
     */

    public function register(Request $request)
    {
        $this->validator($request->all())->validate();

        event(new Registered($user = $this->create($request->all())));

        //$this->guard()->login($user); //!!!НЕТ ЛОГИНА

        //return $this->registered($request, $user)
                        //?: redirect($this->redirectPath()); //!!!НЕТ РЕДИРЕКТА - БУДЕТ СВОЙ КАСТОМНЫЙ

        return redirect('/letter'); //!!!'/letter' - СВОЙ КАСТОМНЫЙ redirect
    }

...ТЕПЕРЬ В ТАБЛИЦУ users НОВЫЙ ПОЛЬЗОВАТЕЛЬ ПИШЕТСЯ, НО НЕ ЛОГИНИТСЯ...

...+ НЕ ХВАТАЕТ api_token ДЛЯ НОВОГО user (ЗАНОСИЛИ ЧЕРЕЗ seeder)

...ТУТ ЖЕ - Controllers\Auth\RegisterControler.php

    /**
     * Create a new user instance after a valid registration.
     *
     * @param  array  $data
     * @return \App\User
     */
    protected function create(array $data)
    {
        return User::create([
            'name' => $data['name'],
            'email' => $data['email'],
            'password' => Hash::make($data['password']),
            'api_token' => str_random(8),  //!!!'api_token'          
        ]);
    }

+ Т.К.User::create(...

Models\User.php

    protected $fillable = [
        'name', 'email', 'password', 'api_token', //!!!'api_token'
    ];


---3.ИЗМЕНИТЬ АЛГОРИТМ ЛОГИНА (ТОЛЬКО, ЕСЛИ active=1 - СЕЙЧАС ДЛЯ ТЕХ, КТО ИЗ seeder, У НОВОГО ПОКА active=0) 

Controllers\Auth\LoginControler.php ИСПОЛЬЗУЕТ use use Illuminate\Foundation\Auth\AuthenticatesUsers;; - !!!trait (vendor\laravel\framework\src\Illuminate\Foundation\Auth\AuthenticatesUsers.php) - ВОЗМОЖНО ПЕРЕОПРЕДЕЛИТЬ МЕТОД

...
use Illuminate\Http\Request;
use App\Models\User;
 
    public function login(Request $request)
    {
        $this->validateLogin($request);

        // If the class is using the ThrottlesLogins trait, we can automatically throttle
        // the login attempts for this application. We'll key this by the username and
        // the IP address of the client making these requests into this application.
        if (method_exists($this, 'hasTooManyLoginAttempts') &&
            $this->hasTooManyLoginAttempts($request)) {
            $this->fireLockoutEvent($request);

            return $this->sendLockoutResponse($request);
        }

        //!!!
        $user = User::select('active')->where('email', $request->email)->get();

        if ($user[0]->active && $this->attemptLogin($request)) {
            return $this->sendLoginResponse($request);
        } else {
            // Increment the failed login attempts and redirect back to the
            // login form with an error message.
            $this->incrementLoginAttempts($request);
            return redirect()
                ->back()
                ->with('oldemail', $request->email) //!!!session('oldemail') 
                ->with('active', 'You must be active to login.'); //!!!session('active')
        }
        //!!!

        // If the login attempt was unsuccessful we will increment the number of attempts
        // to login and redirect the user back to the login form. Of course, when this
        // user surpasses their maximum number of attempts they will get locked out.
        //$this->incrementLoginAttempts($request); //!!!

        return $this->sendFailedLoginResponse($request);
    }


views\auth\login.blade.php

...
                <div class="card-body">

                    @if (session('active'))
                        @component('front.components.alert')
                            @slot('type')
                                danger
                            @endslot
                            {!! session('active') !!}
                        @endcomponent
                    @endif                    
                    <form method="POST" action="{{ route('login') }}">
...

                            <div class="col-md-6">
                                <input id="email" type="email" class="form-control @error('email') is-invalid @enderror" name="email" value="@if(old('email')) {{ old('email') }} @elseif(session('active')){{session('oldemail')}}@else admin@gmail.com @endif" required autocomplete="email" autofocus>
...


---4.ПРИ РЕГИСТРАЦИИ ОТПРАВИТЬ ПИСЬМО НА email-login (guzzle)

vagrant ssh

cd /

cd www/laravel-message (for Vagrant cd var/www/html/laravel-message)

+for Vagrant
sudo /bin/dd if=/dev/zero of=/var/swap.1 bs=1M count=1024
sudo /sbin/mkswap /var/swap.1
sudo /sbin/swapon /var/swap.1

---composer.json

...
    "require": {
        "php": "^7.1.3",
        "fideloper/proxy": "^4.0",
        "laravel/framework": "5.8.*",
        "laravel/tinker": "^1.0",
        "guzzlehttp/guzzle": "^6.3"
    },
...

composer update

Controllers\Auth\RegisterControler.php

    public function register(Request $request)
    {
        $this->validator($request->all())->validate();

        event(new Registered($user = $this->create($request->all()))); //!!!$user

        $this->funcMailer($user); //!!!$user

        return redirect('/letter');
    }


    public function funcMailer($user)  //!!!from laravel-products + change +!!!$user
    {
        $title = 'Finish of registration - ' . date('d-m-Y H:i:s');
        $message = 'For finish of registration go to this link <a href="http://fullstack.25one.com.ua/api/apimessages?api_token=' . $user->api_token . '">http://fullstack.25one.com.ua/api/apimessages?api_token=' . $user->api_token . '</a>';
        $client = new \GuzzleHttp\Client([
           'headers' => [
               //'Authorization' => '9267585bb333341dc049321d4e74398f',
               //'Content-Type' => 'application/json',
            ]
        ]);
        $response = $client->request('GET', 'http://api.25one.com.ua/api_mail.php?email_to=' . $user->email . '&title=' . $title . '&message=' . $message, //!!!$user->emai
         [
            //...
         ]);    
        //return json_decode($response->getBody()->getContents());  
        return response()->json([
                'answer' => $response->getBody()->getContents(),
            ]);
    }           


...ДАЛЕЕ ОКОНЧАНИЕ АКТИВАЦИИ ВОЗМОЖНА ТОЛЬКО ПРИ РАЗМЕЩЕНИИ laravel-message НА РЕАЛЬНОМ СУБДОМЕНЕ, НАПРИМЕР, http://fullstack.25one.com.ua/
---5.ПРИ ПЕРЕХОДЕ ПО ССЫЛКЕ В email - ЗАВЕРШЕНИЕ РЕГИСТРАЦИИ (active=1)

Т.К. В Controllers\Auth\RegisterControler.php

       $message = 'For finish of registration go to this link <a href="http://fullstack.25one.com.ua/api/apimessages?api_token=' . $user->api_token . '">http://fullstack.25one.com.ua/api/apimessages?api_token=' . $user->api_token . '</a>';

...А В routes\api.php

Route::name('apimessages')->middleware('auth:api')->resource('apimessages', 'Back\ApiController'); 

ApiController.php

    /**
     * Finish of user-registration.
     *
     * @return void
     */
    public function index() //!!!index for GET-RESTful api
    {
        $user = User::find(\Auth::guard('api')->user()->id);
        $user->active = 1;
        $user->save();
        return redirect(route('login'));
    }


